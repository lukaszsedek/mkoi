package pl.edu.pw.tele.enigma;

import java.util.ArrayList;
import java.util.logging.Logger;

/**
 * Klasa reprezentuj¹ca wszystkie elementy Enigmy.<br>
 * Reprezentuje maszynê enigma<br>
 * Wzorzec singleton
 * 
 * @author Lukasz
 * 
 */
public final class Enigma implements EnigmaInterface {

	{
		alphabet = new char[] { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I',
				'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U',
				'V', 'W', 'X', 'Y', 'Z' };
	}

	/**
	 * <b>LOG4J</b>
	 */
	Logger log = Logger.getLogger(Enigma.class.getName());

	/**
	 * Signleton instance
	 */
	private static volatile Enigma instance = null;
	protected char[] alphabet = null;
	protected Reflector reflector = null;
	protected ArrayList<Rotor> rotors = null;
	protected int size = 0;

	public Reflector getReflector() {
		return reflector;
	}

	public void setReflector(Reflector reflector) {
		this.reflector = reflector;
	}

	public ArrayList<Rotor> getRotors() {
		return rotors;
	}

	public void setRotors(ArrayList<Rotor> rotors) {
		this.rotors = rotors;
	}

	public int getSize() {
		return size;
	}

	public void setSize(int size) {
		this.size = size;
	}

	/**
	 * <b>Metoda wzorca typu singleton. Chcemy mieæ tylko i wy³¹cznie jeden
	 * obiekt Enigmy. <br>
	 * </b>
	 * 
	 * @return <br>
	 *         instancja Enigmy</b>
	 */
	public static Enigma getInstance() {
		if (instance == null) {
			synchronized (Enigma.class) {
				if (instance == null) {
					instance = new Enigma();
				}
			}
		}
		return instance;
	}

	/**
	 * Zabezpieczenie na tworzenie nowych instacji Enigmy
	 */
	private Enigma() {

	}

	public char[] getAlphabet() {
		return alphabet;
	}

	public void setAlphabet(char[] alphabet) {
		this.alphabet = alphabet;

	}

	@Override
	public void createReflector(String s) {
		log.info("Reflector.createReflector");
		reflector = new Reflector(s);

	}

	@Override
	public void createRotors(int i) {
		if (i < 1)
			return;
		else
			rotors = new ArrayList<Rotor>(i);
	}

	@Override
	public void setNbrRotors(int i) {
		size = i;
	}

	@Override
	public int getNbrRotors() {
		return size;
	}

	@Override
	public void setRotor(int i, String s) {
		
	}
}
