package pl.edu.pw.tele.frontend;

import java.awt.Color;
import java.awt.Label;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Logger;

import javax.print.attribute.standard.MediaSize.Engineering;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.ListModel;
import javax.swing.border.EmptyBorder;
import javax.swing.plaf.SliderUI;

import pl.edu.pw.tele.Utils;
import pl.edu.pw.tele.enigma.Enigma;
import pl.edu.pw.tele.enigma.Reflector;
import pl.edu.pw.tele.enigma.Rotor;

public class MKOICenter extends JPanel {

	static Logger log = Logger.getLogger(MKOICenter.class.getName());
	static JList reflectorAl;
	static JList reflector;
	protected static JList rotor1;
	protected static JList rotor1Al;
	protected static JList rotor2;
	protected static JList rotor2Al;
	protected static JList rotor3;

	static JList rotor3Al;

	static public DefaultListModel lmRefAl;
	static public DefaultListModel lmRef;
	static public DefaultListModel lmRot1;
	static public DefaultListModel lmRot1Al;
	static public DefaultListModel lmRot2;
	static public DefaultListModel lmRot2Al;
	static public DefaultListModel lmRot3;
	static public DefaultListModel lmRot3Al;

	static String[] dupa = new String[] { "empty", "empty", "empty", "empty" };

	public MKOICenter() {

		
		
		// LISTY
		lmRefAl = new DefaultListModel();
		lmRef = new DefaultListModel();
		lmRot1 = new DefaultListModel();
		lmRot1Al = new DefaultListModel();
		lmRot2 = new DefaultListModel();
		lmRot2Al = new DefaultListModel();
		lmRot3 = new DefaultListModel();
		lmRot3Al = new DefaultListModel();

		reflector = new JList(lmRef);
		reflector.setBackground(Color.LIGHT_GRAY);
		reflectorAl = new JList(lmRefAl);
		reflectorAl.setBackground(Color.LIGHT_GRAY);
		rotor1 = new JList(lmRot1);
		rotor1.setBackground(Color.YELLOW);
		rotor1Al = new JList(lmRot1Al);
		rotor1Al.setBackground(Color.YELLOW);
		rotor2 = new JList(lmRot2);
		rotor2Al = new JList(lmRot2Al);
		rotor3 = new JList(lmRot3);
		rotor3.setBackground(Color.CYAN);
		rotor3Al = new JList(lmRot3Al);
		rotor3Al.setBackground(Color.CYAN);
		
		//lustrzane odbicia
//		add(rotor3Al);
//		add(rotor3);
//		
//		add(rotor2Al);
//		add(rotor2);
//		
//		add(rotor2Al);
//		add(rotor2);
		
		// REFLECTOR

		add(reflector);
		add(reflectorAl);
		add(new JLabel("    "));

		// ROTOR 1

		add(rotor1);
		add(rotor1Al);
		add(new JLabel("    "));

		// ROTOR 2

		add(rotor2);
		add(rotor2Al);
		add(new JLabel("    "));

		// ROTOR3

		add(rotor3Al);
		add(rotor3);
		
		// lustrzane odbicia
		

		

	}

	public static void reload() {
		log.info("dodawanie reflectora");
		/**
		 * 
		 */
		Enigma enigma = Enigma.getInstance();
		Reflector ref = enigma.getReflector();

		log.info("REF.SIZE=" + ref.getAlfabet().length);
		char[] alfabet = ref.getAlfabet();
		for (int i = 0; i < alfabet.length; i++) {

			lmRefAl.addElement(alfabet[i]);
		}
		/**
		 * Dowanianie reflektora
		 */
		char[] reflector = ref.getReflector();
		for (int i = 0; i < reflector.length; i++) {

			lmRef.addElement(reflector[i]);
		}

		reflectorAl.setSelectedIndex(4);

		/**
		 * Dodawanie rotora 1
		 */

		Rotor rotor1 = enigma.getRotor1();
		int rot1Size = rotor1.getSize();
		char[] _rotor1 = new char[rot1Size];
		_rotor1 = rotor1.getRotor();
		char[] _rotor1al = rotor1.getAlphabet();

		for (int i = 0; i < rot1Size; ++i) {
			lmRot1.addElement(_rotor1[i]);
			lmRot1Al.addElement(_rotor1al[i]);
		}

		// ROTOR 2
		Rotor rotor2 = enigma.getRotor2();
		int rot2Size = rotor2.getSize();
		char[] _rotor2 = new char[rot2Size];
		_rotor2 = rotor2.getRotor();
		char[] _rotor2al = rotor2.getAlphabet();

		for (int i = 0; i < rot2Size; ++i) {
			lmRot2.addElement(_rotor2[i]);
			lmRot2Al.addElement(_rotor2al[i]);
		}

		// ROTOR 3
		Rotor rotor3 = enigma.getRotor3();
		int rot3Size = rotor3.getSize();
		char[] _rotor3 = new char[rot3Size];
		_rotor3 = rotor3.getRotor();
		char[] _rotor3al = rotor3.getAlphabet();

		for (int i = 0; i < rot3Size; ++i) {
			lmRot3.addElement(_rotor3[i]);
			lmRot3Al.addElement(_rotor3al[i]);
			
		}

		
		
	}
}
